#!/usr/bin/env python

import getpass
import os
import sys
import stat
import tarfile
import time
import zipfile
from StringIO import StringIO

class Ar(object):
    def __init__(self, name):
        self.ar = open(name, 'wb')
        self.ar.write("!<arch>\n")

    def append(self, name):
        self.header = self.ar.tell()
        self.name = name
        self.ar.seek(60, 1)
        self.mark = self.ar.tell()
        return self.ar

    def flush(self):
        size = '%d' % (self.ar.tell() - self.mark)

        if self.ar.tell() % 2:
            self.ar.write('\n')

        self.ar.seek(self.header)
        self.ar.write(self.name.ljust(16))
        self.ar.write('0'.ljust(12))
        self.ar.write('0'.ljust(6))
        self.ar.write('0'.ljust(6))
        self.ar.write('100644'.ljust(8))
        self.ar.write(size.ljust(10))
        self.ar.write('\x60\x0a')
        self.ar.seek(0, 2)

class Control(object):
    def __init__(self, package, version):
        self.pairs = {}
        self.pairs['Package'] = package
        self.pairs['Version'] = version

    def set(self, key, value):
        self.pairs[key] = value

    def __str__(self):
        val = ""
        for key, value in self.pairs.iteritems():
            val += '%s: %s\n' % (key, value)
        return val

class FileSystemConfig(object):
    configs = {}

    def __init__(self, file, uid, gid, mode):
        self.file = file
        self.uid = uid
        self.gid = gid
        self.mode = mode

    @classmethod
    def Get(cls, name):
        name = os.path.normpath(name)
        if name in cls.configs:
            return cls.configs[name]
        else:
            return FileSystemConfig('', 0, 0, 0)

    @classmethod
    def LoadFromZip(cls, zip, path):
        data = zip.read(path)

        for line in data.splitlines():
            pieces = line.split()

            if line[0] == ' ':
                file = ''
                uid, gid, mode = pieces[:3]
            else:
                file, uid, gid, mode = pieces[:4]
            config = FileSystemConfig(file, int(uid), int(gid), int(mode, 8))
            cls.configs[file] = config

def load_config(str):
    return str

class TarFile(object):
    def __init__(self, name, fileobj):
        self.tar = tarfile.open(name, 'w:gz', fileobj=fileobj)

    def add(self, name, arcname=None):
        self.tar.add(name, arcname=arcname)

    def add_file(self, name, uid, gid, mode, fileobj=None, size=0):
        info = tarfile.TarInfo(name)
        info.mtime = time.time()
        info.mode = mode
        info.uid = uid
        info.gid = gid

        if stat.S_ISDIR(mode):
            info.type = tarfile.DIRTYPE
            self.tar.addfile(info)
        elif stat.S_ISLNK(mode):
            info.type = tarfile.SYMTYPE
            info.linkname = fileobj.read()
            self.tar.addfile(info)
        else:
            info.type = tarfile.REGTYPE
            info.size = size
            self.tar.addfile(info, fileobj)

    def close(self):
        self.tar.close()

def append_zip(zip, name, obj):
    zf = zipfile.ZipFile(zip)

    tar = TarFile(name, obj)

    tar.add_file('imgdata', 0, 0, stat.S_IFDIR | 0755)

    for entry in zf.infolist():
        if not entry.filename.startswith('SYSTEM/bin'):
            continue
        perm = entry.external_attr >> 16

        filename = 'imgdata/system/' + entry.filename[7:]

        fileobj = zf.open(entry.filename)
        tar.add_file(filename, 0, 0, perm, fileobj, entry.file_size)
        fileobj.close()

    tar.close()

class TargetEntry(object):
    def __init__(self, name, mode, size, zip):
        self.name = name
        self.mode = mode
        self.size = size
        self.zip = zip
        self.uid = 0
        self.gid = 0

    def MergeMode(self, uid, gid, mode):
        self.uid = uid
        self.gid = gid
        self.mode &= ~0777
        self.mode |= mode

    def Open(self):
        return self.zip.open(self.name)

    @staticmethod
    def LoadFromZip(zf):
        for zip_entry in zf.infolist():
            name = zip_entry.filename
            mode = zip_entry.external_attr >> 16
            size = zip_entry.file_size

            entry = TargetEntry(name, mode, size, zf)
            yield entry

def main(args):
    if len(args) < 4:
        print "%s <output> <package name> <version> <target files> [bootable_images ...]"
        sys.exit(1)

    deb_name, pkg_name, pkg_version, zip_source = args[:4]
    bootable_images = args[4:]

    ar = Ar(deb_name)
    bin = ar.append("debian-binary")
    bin.write("2.0\n")
    ar.flush()

    control = Control(pkg_name, "%s" % pkg_version)
    control.set('Architecture', 'all')
    control.set('Maintainer', getpass.getuser())
    control.set('Description', 'Android package file')

    data = str(control)
    bin = ar.append("control.tar.gz")
    tf = tarfile.open(name='control.tar', mode='w:gz', fileobj=bin)
    info = tarfile.TarInfo("control")
    info.mtime = time.time()
    info.size = len(data)
    info.type = tarfile.REGTYPE
    tf.addfile(info, StringIO(data))
    tf.close()
    ar.flush()

    bin = ar.append("data.tar.gz")
    tar = TarFile('data.tar', bin)
    zf = zipfile.ZipFile(zip_source)

    FileSystemConfig.LoadFromZip(zf, 'META/boot_filesystem_config.txt')
    FileSystemConfig.LoadFromZip(zf, 'META/filesystem_config.txt')

    tar.add_file('imgdata', 0, 0, stat.S_IFDIR | 0755)

    files = TargetEntry.LoadFromZip(zf)
    for file in files:
        if file.name.startswith('BOOT/RAMDISK/'):
            name = file.name[len('BOOT/RAMDISK/'):]
            dest = 'imgdata/root/%s' % name
            metadata = FileSystemConfig.Get(name)
            file.MergeMode(metadata.uid, metadata.gid, metadata.mode)
        elif file.name.startswith('BOOT/'):
            name = file.name[len('BOOT/'):]
            dest = 'imgdata/kernel/%s' % name
        elif file.name.startswith('SYSTEM/'):
            name = file.name[len('SYSTEM/'):]
            dest = 'imgdata/system/%s' % name
            metadata = FileSystemConfig.Get('system/%s' % name)
            file.MergeMode(metadata.uid, metadata.gid, metadata.mode)
        else:
            dest = 'imgdata/%s' % file.name

        fileobj = file.Open()
        tar.add_file(dest, file.uid, file.gid, file.mode, fileobj, file.size)
        fileobj.close()

    tar.add_file('BOOTABLE_IMAGES', 0, 0, stat.S_IFDIR | 0755)
    for bimg in bootable_images:
        fileobj = open(bimg, 'r')
        size = os.fstat(fileobj.fileno()).st_size
        dest = 'BOOTABLE_IMAGES/%s' % os.path.basename(bimg)
        tar.add_file(dest, 0, 0, 0644, fileobj, size)
        fileobj.close()

    tar.close();
    ar.flush()

if __name__ == '__main__':
    main(sys.argv[1:])

